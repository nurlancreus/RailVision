// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RailVision.Infrastructure.Persistence;

#nullable disable

namespace RailVision.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250314135113_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.Coordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Coordinates", t =>
                        {
                            t.HasCheckConstraint("CK_Coordinates_Latitude", "[Latitude] >= -90 AND [Latitude] <= 90");

                            t.HasCheckConstraint("CK_Coordinates_Longitude", "[Longitude] >= -180 AND [Longitude] <= 180");
                        });

                    b.HasDiscriminator<string>("Type").HasValue("Coordinate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Obstacle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ElementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Obstacles");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Railway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ElementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Railways");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ElementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.ObstacleCoordinate", b =>
                {
                    b.HasBaseType("RailVision.Domain.Entities.Coordinates.Coordinate");

                    b.Property<Guid>("ObstacleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ObstacleId");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Coordinates_Latitude", "[Latitude] >= -90 AND [Latitude] <= 90");

                            t.HasCheckConstraint("CK_Coordinates_Longitude", "[Longitude] >= -180 AND [Longitude] <= 180");
                        });

                    b.HasDiscriminator().HasValue("Obstacle");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.RailwayCoordinate", b =>
                {
                    b.HasBaseType("RailVision.Domain.Entities.Coordinates.Coordinate");

                    b.Property<Guid>("RailwayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RailwayId");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Coordinates_Latitude", "[Latitude] >= -90 AND [Latitude] <= 90");

                            t.HasCheckConstraint("CK_Coordinates_Longitude", "[Longitude] >= -180 AND [Longitude] <= 180");
                        });

                    b.HasDiscriminator().HasValue("Railway");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.StationCoordinate", b =>
                {
                    b.HasBaseType("RailVision.Domain.Entities.Coordinates.Coordinate");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StationId")
                        .IsUnique()
                        .HasFilter("[StationId] IS NOT NULL");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Coordinates_Latitude", "[Latitude] >= -90 AND [Latitude] <= 90");

                            t.HasCheckConstraint("CK_Coordinates_Longitude", "[Longitude] >= -180 AND [Longitude] <= 180");
                        });

                    b.HasDiscriminator().HasValue("Station");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.ObstacleCoordinate", b =>
                {
                    b.HasOne("RailVision.Domain.Entities.Obstacle", "Obstacle")
                        .WithMany("Coordinates")
                        .HasForeignKey("ObstacleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obstacle");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.RailwayCoordinate", b =>
                {
                    b.HasOne("RailVision.Domain.Entities.Railway", "Railway")
                        .WithMany("Coordinates")
                        .HasForeignKey("RailwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Railway");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Coordinates.StationCoordinate", b =>
                {
                    b.HasOne("RailVision.Domain.Entities.Station", "Station")
                        .WithOne("Coordinate")
                        .HasForeignKey("RailVision.Domain.Entities.Coordinates.StationCoordinate", "StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Obstacle", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Railway", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("RailVision.Domain.Entities.Station", b =>
                {
                    b.Navigation("Coordinate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
